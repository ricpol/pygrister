NEWS
====

Bleeding edge: committed to the repo, not yet released on PyPI
--------------------------------------------------------------

- new "gry version" command outputs Pygrister/Gry version.

v0.8.0, 2025.08.10
------------------

- The new Gry cli tool is here! Basically, you can try "gry --help" in 
your shell and figure it out. But there is also an online doc page, of course. 

- The whole API call engine has been moved to a separate module, and rewritten. 
  This, in turn, has generated a few API changes in Pygrister (sorry!) but 
  everything should be a little more reliable now. 
  Basically, Pygrister high-level, regular usage (ie for Grist API calls) 
  won't change, but low-level interfaces may be different.

New and changed APIs:
  - GristApi.apicall (ie, the engine that never get called directly in 
    everyday use) has been replaced by the new apicaller.ApiCaller class, 
    which also allows extension/customisation of the API engine. 
  - New "custom_apicaller" optional argument in GristApi.__init__ to plug in 
    custom API engines. The API engine instance is accessible as 
    GristApi.apicaller. 
  - As a consequence, GristApi.apicall is now GristApi.apicaller.apicall.
  - Also, GristApi.request_options is now GristApi.apicaller.request_options. 
  - The "request_options" argument in GristApi.__init__ is gone. To specify 
    additional options, just set GristApi.apicaller.request_options at runtime. 
  - All "inspect attributes" GristApi.req_* and GristApi.resp_* are gone. 
    Instead, we expose the underlying Requests low-level objects directly, as 
    GristApi.request and GristApi.response for you to inspect. If a response 
    could not be retrieved, the request object will be available anyway. 
    This should also fix issues #4 and #7.
  - GristApi.inspect is still there, and will collect and print the most relevant 
    info from the Requests objects. 
  - MAXSAVEDRESP and SAVEBINARYRESP globals are gone. Instead, GristApi.inspect 
    grows a "max_content" argument to limit the request/response body size. 
  - GristApi.inspect has a new "sep" argument to set a custom separator 
    between the elements (eg to allow one-liner dumps for logs etc.)
  - The GristApi.ok attribute has changed a little its meaning: now it will be 
    set to "False" also when no response could be retrieved at all. 
  - A new ApiCaller.response_as_json utility has been added, which puts some 
    effort into returning a json-compliant string from *all* API calls, 
    overcoming the occasional Grist quirk, and even if the call went wrong. 
    This is never actually used by Pygrister (which returns complex Python 
    objects anyway), but it can be useful for client code: in the Gry tool, 
    this is how the "-vv" option works now, thus fixing issue #10. 
  - A new ApiCaller.dry_run mode has been introduced, where you go as far as 
    to prepare the request, but never actually post it. 
  - The old "safe mode" works as before, but now runs in dry mode: it will 
    still raise an exception, but also leave a request to inspect afterwards. 

Other, smaller API changes:
  - we are now consistently using pathlib.Path objects instead of os.path 
    strings to express files and paths. This may help client programs down 
    the line, but it's really just a cosmetic change for Pygrister itself. 
    Since we don't use Path-specific operations internally, you may still 
    pass strings, as long as you don't mind being scolded by your type checker.
    This is issue #9.
  - GristApi.upload_restore_attachments and GristApi.download_attachments 
    used to accept target filenames *without extension*, a dubious design 
    decision which has now been reversed. Pass regular pathlib.Path objects 
    (or just strings) instead, complete with the filename extension. 

Other changes:
  - Since workspace IDs are, in fact, integers, "GRIST_WORKSPACE_ID" now 
    defaults to "0"; additionally, Pygrister will check your configuration 
    and throw a GristApiNotConfigured if you set this ID to a non-castable 
    string. Python function calls (as in grist.delete_workspace(42)) 
    will accept integers as before. 
    This will help avoiding some odd-looking exceptions, see issue #8.

v0.7.0, 2025.05.01
------------------

1) New APIs:
   - DELETE /orgs/{orgId} -> GritsApi.delete_team
     since there's still no way to create a team, use this one at your risk!
   - POST /docs/{docId}/states/remove -> GristApi.delete_doc_history
   - POST /docs/{docId}/force-reload -> GristApi.reload_doc
   - GET  /docs/{docId}/attachments/archive -> download_attachments
   - POST /docs/{docId}/attachments/archive -> upload_restore_attachments
   - GET /docs/{docId}/attachments/store -> see_attachment_store
   - POST /docs/{docId}/attachments/store -> update_attachment_store
   - GET /docs/{docId}/attachments/stores -> list_store_settings
   - POST /docs/{docId}/attachments/transferAll -> transfer_attachments
   - GET /docs/{docId}/attachments/transferStatus -> see_transfer_status
2) changed/deprecated APIs:
   - GristApi.upload_attachment is now capable of uploading multiple files: 
     as a result, it has been renamed to "upload_attachments" (plural), with 
     a different signature. The old "upload_attachment" is *deprecated* and 
     redirects to "upload_attachments". It will be removed at some point. 
   - some older "delete_*" apis used to ask for a doc_id esplicitely, as an extra  
     safety measure. It was a dubious design choice from the start, and now 
     it has been reversed: "delete" apis will default to the current document, 
     just like the rest of them. Functions affected: delete_workspace, delete_doc, 
     delete_column, delete_rows (issue #5)
   - moved configuration to config.py: api changed:
      - the new config.Configurator class will now handle configuration
      - new "custom_configurator" optional param to GristApi.__init__
      - <grist>.make_server is now <grist>.configurator.make_server
      - <grist>._config (private but useful!) is now <grist>.configurator.config
   - moved exceptions to a new exceptions.py module: api changed:
      - from pygrister.api import <some_exception> is now 
        from.pygrister.exceptions import <some_exception>
3) various and sundry:
   - added a note in the docs to clarify that Grist Desktop is also supported 
     (issue #6)
   - test suite: added special config keys in config_test.json, to skip SCIM tests 
     and to skip external attachments tests
   - first stab at a new Pygrister cli

v0.6.0, 2025.03.08
------------------

- support for sessions from Requests, to improve performance when making 
  several api calls in a row
- provisional support for the new Scim apis
- added a stub for DELETE /users/<userid>, but we are not implementing 
  this one at the moment
- added a note and a special config key in the test suite only, to skip 
  tests that create users, since in SaaS Grist they can't really be deleted
- added a note in both the docstring for "GristApi.inspect" and the docs, 
  to clarify that, in fact, if no reponse is retrieved, then nothing useful 
  will be left to inspect. 

v0.5.0, 2024.11.17
------------------

- it is now possible to pass additional parameters to the Requests call 
  (fixes issue #2)
- added a new type conversion system
- fixes for Grist api changes:
  Grist made (undocumented!) changes in the return value of a few Apis. 
  We opted to maintain the old returns, but now you need to *upgrade* 
  Pygrister in order to keep things as before!
  * DELETE docs/<docid> - used to return None, now returns <docid>
    Pygrister's "delete_doc" will return None as before
  * PATCH docs/<docid> - used to return None, now returns <docid>
    Pygrister's "update_doc" will return None as before
  * PATCH docs/<docid>/move - used to return None, now returns <docid>
    Pygrister's "move_doc" will return None as before
  * DELETE workspaces/<wsid> - used to return None, now returns <wsid>
    Pygrister's "delete_workspace" will return None as before
  * PATCH workspaces/<wsid> - used to return None, now returns <wsid>
    Pygrister's "update_workspace" will return None as before
  As usual, the original Grist response is always available as "resp_content"
- Python 3.13 is also supported

v0.4.0, 2024.06.15
------------------

- Pygrister is now on PyPI, and "officially" in beta status. New apis will 
  be added, but the basic interface design should be pretty stable now
- nothing changed, just a little code cleanup and a version bump to mark 
  the PyPI launch

v0.3.0, 2024.06.02
------------------

- support for the self-hosted version of Grist
- new GristApi.update_config to update config keys incrementally, without 
  re-building the configuration from scratch
- new configuration schema for the test suite, based on a config_test.json 
  file
- tests, documentation

v0.2.0, 2024.05.25
------------------

- uniform and simplify responses returned by function API calls 
  (eg, now all list_* function will return a list of dictionaries)
- uniform and simplify the record APIs: now records are always expressed 
  as lists of dictionaries, across all record APIs
- new GristApi.ok attribute
- GristApi.see_records is now GristApi.list_records
- get rid of many None defaults in parameters
- the "new_name" parameter is now optional in GristApi.update_doc
- tests, documentation

v0.1.0, 2024.05.12
------------------

Initial alpha release.
